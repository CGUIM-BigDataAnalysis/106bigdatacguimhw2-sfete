{"frames":[{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"merge(people_out, country.map, by = \"iso_a3\", all.x = T) %>% \n    group_by(group) %>% arrange(order)","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"eval(lhs, parent, parent)","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"eval(lhs, parent, parent)","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"merge(people_out, country.map, by = \"iso_a3\", all.x = T)","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"merge.data.frame(people_out, country.map, by = \"iso_a3\", all.x = T)","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"fix.by(by.x, x)","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"stop(ngettext(sum(bad), \"'by' must specify a uniquely valid column\", \n    \"'by' must specify uniquely valid columns\"), domain = NA)","line_number":0}],"message":"Error in fix.by(by.x, x) : 'by' must specify a uniquely valid column\n"}